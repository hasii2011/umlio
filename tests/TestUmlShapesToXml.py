
from unittest import TestSuite
from unittest import main as unitTestMain

from pathlib import Path

from codeallyadvanced.ui.UnitTestBaseW import UnitTestBaseW

from pyutmodelv2.PyutClass import PyutClass
from pyutmodelv2.enumerations.PyutDisplayParameters import PyutDisplayParameters
from pyutmodelv2.enumerations.PyutStereotype import PyutStereotype

from umlshapes.preferences.UmlPreferences import UmlPreferences

from umlshapes.shapes.UmlClass import UmlClass
from umlshapes.types.UmlDimensions import UmlDimensions
from umlshapes.types.UmlPosition import UmlPosition

from wx.lib.ogl import OGLInitialize

from umlio.IOTypes import UmlDiagram
from umlio.IOTypes import UmlDiagramTitle
from umlio.IOTypes import UmlDiagramType

from umlio.UmlShapesToXml import UmlShapesToXml

EXPECTED_EMPTY_PROJECT: str = '<?xml version=\'1.0\' encoding=\'iso-8859-1\'?>\n<UmlProject version="12.0" codePath="/users/hasii" />'

EXPECTED_EMPTY_DIAGRAM: str = (
    '<?xml version=\'1.0\' encoding=\'iso-8859-1\'?>\n'
    '<UmlProject version="12.0" codePath="/users/hasii">\n    '
    '<UMLDiagram type="Not Set" title="" scrollPositionX="1" scrollPositionY="1" pixelsPerUnitX="1" pixelsPerUnitY="1" />\n'
    '</UmlProject>'
)

EXPECTED_SINGLE_CLASS_DIAGRAM: str = (
    "< ?xml version='1.0' encoding='iso-8859-1'? >"
    '< UmlProject version="12.0" codePath="/users/hasii" >'
    '< UMLDiagram type="Class Diagram" title="Unit Test Class Diagram" scrollPositionX="1" scrollPositionY="1" pixelsPerUnitX="1" pixelsPerUnitY="1" >'
    '< UmlClass id="play.small.long.group" width="125" height="100" x="300" y="500" >'
    '< PyutClass id="0" name="ClassName 1" displayMethods="True" displayParameters="Unspecified" displayConstructor="Unspecified" displayDunderMethods="Unspecified" displayFields="True" displayStereotype="True" fileName="" description="" / >'
    '< / UmlClass >'
    '< / UMLDiagram >'
    '< / UmlProject >'
)

class TestUmlShapesToXml(UnitTestBaseW):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 19 June 2025
    """

    classCounter: int = 1

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()
        OGLInitialize()
        self._preferences: UmlPreferences = UmlPreferences()

    def tearDown(self):
        super().tearDown()

    def testEmptyProject(self):

        umlShapesToXml:     UmlShapesToXml = UmlShapesToXml(projectCodePath=Path('/users/hasii'))
        actualEmptyProject: str            = umlShapesToXml.xml

        self.logger.debug(f'{actualEmptyProject=}')
        self.assertEqual(EXPECTED_EMPTY_PROJECT, actualEmptyProject, 'Empty project changed')

    def testEmptyDiagram(self):

        umlShapesToXml: UmlShapesToXml = UmlShapesToXml(projectCodePath=Path('/users/hasii'))
        emptyDiagram:   UmlDiagram     = UmlDiagram()

        umlShapesToXml.serialize(umlDiagram=emptyDiagram)

        actualEmptyDiagram: str = umlShapesToXml.xml

        self.logger.debug(f'{actualEmptyDiagram=}')
        self.assertEqual(EXPECTED_EMPTY_DIAGRAM, actualEmptyDiagram, 'Empty diagram changed')

    def testSingleUmlClass(self):

        umlShapesToXml:     UmlShapesToXml = UmlShapesToXml(projectCodePath=Path('/users/hasii'))
        singleClassDiagram: UmlDiagram     = UmlDiagram()
        singleClassDiagram.diagramType  = UmlDiagramType.CLASS_DIAGRAM
        singleClassDiagram.diagramTitle = UmlDiagramTitle('Unit Test Class Diagram')

        singleClassDiagram.umlClasses.append(self._createSingleClass())
        umlShapesToXml.serialize(umlDiagram=singleClassDiagram)

        single_quotedClassDiagram: str = umlShapesToXml.xml

        self.logger.debug(f'{single_quotedClassDiagram=}')
        self._debugWriteToFile('SingleClass.xml', xml=single_quotedClassDiagram)

    def _createSingleClass(self) -> UmlClass:

        umlClass: UmlClass = UmlClass(
            pyutClass=self._createPyutClass(),
            size=UmlDimensions(width=125, height=100)
        )

        umlClass.position = UmlPosition(x=300, y=500)
        return umlClass

    def _createPyutClass(self) -> PyutClass:

        className: str = f'{self._preferences.defaultClassName} {TestUmlShapesToXml.classCounter}'
        TestUmlShapesToXml.classCounter += 1

        pyutClass: PyutClass  = PyutClass(name=className)
        pyutClass.stereotype  = PyutStereotype.METACLASS
        pyutClass.showFields  = True
        pyutClass.showMethods = True
        pyutClass.displayParameters = PyutDisplayParameters.UNSPECIFIED

        return pyutClass

    def _debugWriteToFile(self, fileName: str, xml: str):

        p: Path = Path(f'/tmp/{fileName}')

        p.write_text(xml)


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestUmlShapesToXml))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
