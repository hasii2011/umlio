from typing import List
from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase

from tests.demo.eventengine.EventEngine import EventEngine
from tests.demo.eventengine.EventType import EventType


class TestDemoEventEngine(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 21 July 2025
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def testSingleton(self):
        eventEngine1: EventEngine = EventEngine()
        eventEngine2: EventEngine = EventEngine()

        id1 = id(eventEngine1)
        id2 = id(eventEngine2)

        self.assertEqual(id1, id2, 'Not a singleton!!!')

    def testDiagramChanged(self):

        eventEngine: EventEngine = EventEngine()
        eventEngine.registerListener(EventType.DIAGRAM_CHANGED, callback=self._diagramChangedCallback)

        eventEngine.sendEvent(EventType.DIAGRAM_CHANGED, name='Bogus', data=[1, 2, 3])

    def _diagramChangedCallback(self, name: str, data: List[int]):
        self.logger.debug(f'{name}, {data}')


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestDemoEventEngine))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
