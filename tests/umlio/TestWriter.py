from pathlib import Path
from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase

from umlio.IOTypes import UmlDiagram
from umlio.IOTypes import UmlDiagramTitle
from umlio.IOTypes import UmlDiagramType
from umlio.IOTypes import UmlProject
from umlio.Writer import Writer
from umlio.Writer import XML_SUFFIX

from tests.umlio.UmlIOBaseTest import UmlIOBaseTest

UNIT_TEST_DIAGRAM_DIRECTORY: str = 'UmlDiagramProjects'
EMPTY_DIAGRAMS_PROJECT:      str = f'EmptyDiagramsProject{XML_SUFFIX}'


class TestWriter(UmlIOBaseTest):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 06 July 2025
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def testWriteFile(self):
        pass

    def testWriteEmptyDiagramsXmlFile(self):

        directory:             Path = Path.home() / UNIT_TEST_DIAGRAM_DIRECTORY
        emptyDiagramsFileName: Path = directory / EMPTY_DIAGRAMS_PROJECT

        umlProject: UmlProject = UmlProject()
        umlProject.codePath = Path.home()
        umlProject.fileName = emptyDiagramsFileName.as_posix()

        titleZero: UmlDiagramTitle = UmlDiagramTitle('Number Zero')
        titleOne:  UmlDiagramTitle = UmlDiagramTitle('Number One')
        titleTwo:  UmlDiagramTitle = UmlDiagramTitle('Number Two')

        diagramZero: UmlDiagram = self._createUmlDiagram(diagramType=UmlDiagramType.CLASS_DIAGRAM,    diagramTitle=titleZero)
        diagramOne:  UmlDiagram = self._createUmlDiagram(diagramType=UmlDiagramType.USE_CASE_DIAGRAM, diagramTitle=titleOne)
        diagramTwo:  UmlDiagram = self._createUmlDiagram(diagramType=UmlDiagramType.SEQUENCE_DIAGRAM, diagramTitle=titleTwo)

        umlProject.umlDiagrams[titleZero] = diagramZero
        umlProject.umlDiagrams[titleOne]  = diagramOne
        umlProject.umlDiagrams[titleTwo]  = diagramTwo

        directory.mkdir(parents=True, exist_ok=True)
        emptyDiagramsFileName.touch()
        writer: Writer = Writer()
        writer.writeXmlFile(umlProject=umlProject, fileName=emptyDiagramsFileName)

        goldenFileName: str = UnitTestBase.getFullyQualifiedResourceFileName(
            package=UmlIOBaseTest.GOLDEN_FILES_PACKAGE_NAME,
            fileName=EMPTY_DIAGRAMS_PROJECT
        )
        status: int = self._runDiff(generatedFile=emptyDiagramsFileName, goldenFile=Path(goldenFileName))

        self.assertEqual(0, status)


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestWriter))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
