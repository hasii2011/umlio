from typing import cast
from unittest import TestSuite
from unittest import main as unitTestMain

from pathlib import Path

from codeallyadvanced.ui.UnitTestBaseW import UnitTestBaseW
from umlshapes.IApplicationAdapter import IApplicationAdapter
from umlshapes.frames.UmlClassDiagramFrame import CreateLollipopCallback
from umlshapes.frames.UmlClassDiagramFrame import UmlClassDiagramFrame
from umlshapes.preferences.UmlPreferences import UmlPreferences
from wx.lib.ogl import OGLInitialize

from umlio.IOTypes import UmlDiagramTitle
from umlio.IOTypes import UmlDiagramType

from pyutmodelv2.enumerations.PyutLinkType import PyutLinkType

from tests.RelationshipCreator import CreatedAssociation
from tests.RelationshipCreator import RelationshipCreator

from umlio.IOTypes import UmlDiagram

from umlio.UmlShapesToXml import UmlShapesToXml


class TestUmlRelationships(UnitTestBaseW):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 24 June 2025
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()
        OGLInitialize()
        self._preferences: UmlPreferences = UmlPreferences()

        self._diagramFrame = UmlClassDiagramFrame(
            parent=self._topLevelWindow,
            applicationAdapter=cast(IApplicationAdapter, None),
            createLollipopCallback=cast(CreateLollipopCallback, None)
        )

        self._relationShipCreator: RelationshipCreator = RelationshipCreator(diagramFrame=self._diagramFrame)

    def tearDown(self):
        super().tearDown()

    def testBareAssociation(self):

        umlShapesToXml:      UmlShapesToXml = self._createXmlCreator()
        associationsDiagram: UmlDiagram     = self._createUmlDiagram(UmlDiagramType.CLASS_DIAGRAM, 'Bare Association Class Diagram')

        createdAssociation: CreatedAssociation = self._relationShipCreator.createRelationship(PyutLinkType.ASSOCIATION)

        associationsDiagram.umlClasses.append(createdAssociation.sourceUmlClass)
        associationsDiagram.umlClasses.append(createdAssociation.destinationUmlClass)
        associationsDiagram.umlLinks.append(createdAssociation.association)

        umlShapesToXml.serialize(umlDiagram=associationsDiagram)

        associationXML: str = umlShapesToXml.xml

        self.logger.debug(f'{associationXML=}')
        self._debugWriteToFile('Association.xml', xml=associationXML)

    def _createXmlCreator(self) -> UmlShapesToXml:

        umlShapesToXml: UmlShapesToXml = UmlShapesToXml(projectCodePath=Path('/users/hasii'))
        return umlShapesToXml

    def _createUmlDiagram(self, diagramType: UmlDiagramType, diagramTitle: str) -> UmlDiagram:

        umlDiagram: UmlDiagram  = UmlDiagram()
        umlDiagram.diagramType  = diagramType
        umlDiagram.diagramTitle = UmlDiagramTitle(diagramTitle)

        return umlDiagram

    def _debugWriteToFile(self, fileName: str, xml: str):

        p: Path = Path(f'/tmp/{fileName}')

        p.write_text(xml)


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestUmlRelationships))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
