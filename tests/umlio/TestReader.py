
from unittest import TestSuite
from unittest import main as unitTestMain

from pathlib import Path

from wx.lib.ogl import OGLInitialize

from codeallyadvanced.ui.UnitTestBaseW import UnitTestBaseW
from codeallybasic.UnitTestBase import UnitTestBase

from tests.umlio.UmlIOBaseTest import EMPTY_DIAGRAMS_XML_PROJECT
from tests.umlio.UmlIOBaseTest import UmlIOBaseTest

from umlio.IOTypes import UmlDiagram
from umlio.IOTypes import UmlDiagramTitle
from umlio.IOTypes import UmlProject

from umlio.Reader import Reader

SINGLE_TEXT_DIAGRAM_XML_PROJECT:     str = 'SingleTextProject.xml'
SINGLE_NOTE_DIAGRAM_XML_PROJECT:     str = 'SingleNoteProject.xml'
SINGLE_ACTOR_DIAGRAM_XML_PROJECT:    str = 'SingleActorProject.xml'
SINGLE_USE_CASE_DIAGRAM_XML_PROJECT: str = 'SingleUseCaseProject.xml'
COMPLEX_CLASSES_DIAGRAM_XML_PROJECT: str = 'ComplexClassesProject.xml'


class TestReader(UnitTestBaseW):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 11 July 2025
    """
    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()
        OGLInitialize()

    def tearDown(self):
        super().tearDown()

    def testBasicXmlRead(self):

        emptyProject: str = UnitTestBase.getFullyQualifiedResourceFileName(
            package=UmlIOBaseTest.GOLDEN_FILES_PACKAGE_NAME,
            fileName=EMPTY_DIAGRAMS_XML_PROJECT)

        reader: Reader = Reader()

        reader.readXmlFile(Path(emptyProject))

    def testDeserializeUmlTextElements(self):

        umlTextProject: str = UnitTestBase.getFullyQualifiedResourceFileName(
            package=UmlIOBaseTest.GOLDEN_FILES_PACKAGE_NAME,
            fileName=SINGLE_TEXT_DIAGRAM_XML_PROJECT)

        reader: Reader = Reader()

        umlProject: UmlProject = reader.readXmlFile(Path(umlTextProject))

        textDiagram: UmlDiagram = umlProject.umlDiagrams[UmlDiagramTitle('Uml Text Diagram')]

        self.assertEqual(1, len(textDiagram.umlTexts), 'Not the correct Uml Text object count')

    def testDeserializedUmlNoteElements(self):

        umlNoteProject: str = UnitTestBase.getFullyQualifiedResourceFileName(
            package=UmlIOBaseTest.GOLDEN_FILES_PACKAGE_NAME,
            fileName=SINGLE_NOTE_DIAGRAM_XML_PROJECT)

        reader: Reader = Reader()

        umlProject: UmlProject = reader.readXmlFile(Path(umlNoteProject))

        noteDiagram: UmlDiagram = umlProject.umlDiagrams[UmlDiagramTitle('Uml Note Diagram')]

        self.assertEqual(1, len(noteDiagram.umlNotes), 'Not the correct Uml Note object count')

    def testDeserializedUmlActorElements(self):

        umlActorProject: str = UnitTestBase.getFullyQualifiedResourceFileName(
            package=UmlIOBaseTest.GOLDEN_FILES_PACKAGE_NAME,
            fileName=SINGLE_ACTOR_DIAGRAM_XML_PROJECT)

        reader: Reader = Reader()

        umlProject: UmlProject = reader.readXmlFile(Path(umlActorProject))
        noteDiagram: UmlDiagram = umlProject.umlDiagrams[UmlDiagramTitle('Use Case Actor Diagram')]

        self.assertEqual(1, len(noteDiagram.umlActors), 'Not the correct Uml Actor object count')

    def testDeserializedUmlUseCaseElements(self):

        umlUseCaseProject: str = UnitTestBase.getFullyQualifiedResourceFileName(
            package=UmlIOBaseTest.GOLDEN_FILES_PACKAGE_NAME,
            fileName=SINGLE_USE_CASE_DIAGRAM_XML_PROJECT)

        reader: Reader = Reader()

        umlProject:     UmlProject = reader.readXmlFile(Path(umlUseCaseProject))
        useCaseDiagram: UmlDiagram = umlProject.umlDiagrams[UmlDiagramTitle('Use Case Diagram')]

        self.assertEqual(1, len(useCaseDiagram.umlUseCases), 'Not the correct Uml Use Case object count')

    def testDeserializeComplexClasses(self):

        complexClassesProject: str = UnitTestBase.getFullyQualifiedResourceFileName(
            package=UmlIOBaseTest.GOLDEN_FILES_PACKAGE_NAME,
            fileName=COMPLEX_CLASSES_DIAGRAM_XML_PROJECT)

        reader:     Reader     = Reader()
        umlProject: UmlProject = reader.readXmlFile(Path(complexClassesProject))

        complexClassesDiagram: UmlDiagram = umlProject.umlDiagrams[UmlDiagramTitle('Full Fledge Class Diagram')]

        self.assertEqual(2, len(complexClassesDiagram.umlClasses), 'Not the correct UML class object count')


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestReader))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
